name: 'Manjaro Package CI'

on:
  schedule:
    - cron: "* 5 * * *"
  
jobs:
  build_package:
    runs-on: ubuntu-latest
    strategy:
      matrix:  
        PACKAGE: [vim-git]
        REPO: [pheiduck]
    steps:
      - run: sudo rm -f /etc/apt/sources.list.d/*
      - id: install_build-dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: build-essential cmake fakeroot git libarchive-dev libarchive-tools libcurl4-openssl-dev libgpgme-dev libssl-dev libarchive-dev zip zstd
      - name: Free disk space
        run: |
          sudo mv -v /usr/local /usr/local.trash
          sudo mv -v /opt/hostedtoolcache /opt/hostedtoolcache.trash
          sudo systemd-run rm -rf /usr/local.trash /opt/hostedtoolcache.trash
      - id: install_python-dependencies
        run: |
          sudo python3 -m pip -q install meson ninja
      - id: install_pacman
        run: |
          sudo git clone -q --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
          pushd pacman
          sudo git clone -q --depth 1 https://gitlab.archlinux.org/pacman/pacman.git
          pushd pacman
          sudo meson --prefix=/usr \
                      --buildtype=plain \
                      -Ddoc=disabled \
                      -Ddoxygen=enabled \
                      -Dscriptlet-shell=/usr/bin/bash \
                      -Dldconfig=/usr/bin/ldconfig \
                      build
          sudo meson compile -C build
          sudo meson install -C build
          popd
          sudo install -m644 pacman.conf /etc/pacman.conf
          sudo install -m644 makepkg.conf /etc/
          sudo mkdir -p /etc/pacman.d
          sudo touch /etc/pacman.d/mirrorlist
          popd
      - id: install_keyrings
        run: |
          sudo install -dm755 /usr/share/pacman/keyrings/
          sudo git clone -q --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
          pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          popd
          
          mkdir -p archlinux-keyring
          pushd archlinux-keyring
          curl -sL https://archlinux.org/packages/core/any/archlinux-keyring/download -o /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
          popd
          sudo pacman-key --init
          sudo pacman-key --populate archlinux manjaro
      - id: install_manjaro-chrootbuild
        run: |
          sudo git clone -q --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
          pushd manjaro-chrootbuild
          sudo ./install.sh "PACKAGER = T.J. Townsend <blakkheim@archlinux.org>" 
          popd
      - id: clone_repo
        env:
          PACKAGE: vim-git
          REPO: pheiduck
        run: |
          sudo git clone -q https://github.com/${{ matrix.repo }}/${{ matrix.package }}.git
      - name: Cache chrootbuild
        id: cache-chrootbuild
        uses: john-shaffer/cache@main
        with:
          path: /var/lib/chrootbuild
          key: ${{ runner.os }}-chrootbuild
      - id: build_package
        if: ${{ steps.cache-chrootbuild.outputs.cache-hit != 'true' || 'true' }}
        run: |
          sudo chrootbuild -p ${{ matrix.package }}
      - id: publish_package
        shell: bash -O extglob {0}
        run: |
          _ver=$(curl -s https://api.github.com/repos/vim/vim/tags | sed -n "3p" | cut -c15-22)
          _rel=$(grep ^pkgrel= ${{ matrix.package }}/PKGBUILD | cut -d'=' -f2)
          _tag=${_ver}-${_rel}
          echo ${{ github.token }} | gh auth login --with-token
          gh release create ${_tag} --title ${_tag} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
          GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${_tag}
          gh attestation verify ./*.zst --repo ${GITHUB_REPOSITORY} --cert-identity 'https://github.com/thepwagner-org/actions/.github/workflows/golang-release-attest.yaml@refs/heads/github-attestations'
          gh release upload ${_tag} --repo ${GITHUB_REPOSITORY} --clobber ./*.zst
      - name: Cleanup Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          ###### EDIT HERE ######
          repo: pheiduck/vim-git
          #######################
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
